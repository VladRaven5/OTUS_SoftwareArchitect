apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tasks-chart.fullname" . }}
  labels:
    {{- include "tasks-chart.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "tasks-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "tasks-chart.selectorLabels" . | nindent 8 }}
        date: "{{ now | unixEpoch }}"
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tasks-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
       - name: wait-rabbit-ready
         image: busybox:latest
         env:
         - name: RABBIT_HOST
           value: {{ .Values.rabbitMq.host }}          
         command: ['sh', '-c', 'until nslookup $RABBIT_HOST; do echo waiting for $RABBIT_HOST; sleep 2; done;']
       - name: wait-pg-ready
         image: busybox:latest
         env:
          - name: POSTGRES_HOST
            value: {{ .Values.postgresql.fullnameOverride }}
         command: ['sh', '-c', 'until nslookup $POSTGRES_HOST; do echo waiting for $POSTGRES_HOST; sleep 2; done;']
       - name: tasks-pg-migration-job
         image: postgres:latest
         env:
          - name: POSTGRES_USER
            value: {{.Values.postgresql.postgresqlUsername}}
          - name: POSTGRES_PASSWORD
            value: {{.Values.postgresql.postgresqlPassword}}
          - name: POSTGRES_DB
            value: {{.Values.postgresql.postgresqlDatabase}}
          - name: POSTGRES_HOST
            value: {{.Values.postgresql.fullnameOverride}}
          - name: POSTGRES_PORT
            value: "{{.Values.postgresql.service.port}}"
         command:
          - sh
          - "-c"
          - |
            psql "user=$POSTGRES_USER password=$POSTGRES_PASSWORD host=$POSTGRES_HOST port=$POSTGRES_PORT dbname=$POSTGRES_DB" << 'EOF'
              create database tasks;
              \c tasks;
              create table projects (id char(36) primary key, title varchar(150));
              create table lists (id char(36) primary key, projectid char(36), title varchar(150));
              create table users (id char(36) primary key, username varchar(150));
              create table labels (id char(36) primary key, title varchar(30), color char(6));
              create table project_members (userid char(36), projectid char(36), primary key (userid, projectid));
              create table tasks (id char(36) primary key, title varchar(200), description varchar, listid char(36),
                  state int, duedate timestamp, createddate timestamp, version int not null,
                  constraint fk_tasks_lists foreign key(listid) references lists(id));
              create table task_members(taskid char(36), userid char(36), primary key (taskid, userid));
              create table task_labels(taskid char(36), labelid char(36), primary key (taskid, labelid));
              create table transactions(id char(36) primary key, objectid char(36), type varchar(50), data varchar, message varchar, state int, createddate timestamp);
              create table handled_requests(requestid char(36) primary key, invalidateat timestamp);
              create table outbox_messages (id serial primary key, topic varchar(30), message varchar, action varchar(30), isinprocess boolean not null default false);
            
              insert into projects (id, title) values 
                ('project00000000000000000000000000001', 'project1'),
                ('project00000000000000000000000000002', 'project2'),
                ('project00000000000000000000000000003', 'project3'),
                ('project00000000000000000000000000004', 'project4'),
                ('project00000000000000000000000000005', 'project5');

              insert into lists (id, projectid, title) values 
                ('list00000000000000000000000000000001', 'project00000000000000000000000000001', 'list1'),
                ('list00000000000000000000000000000002', 'project00000000000000000000000000002', 'list2');

              insert into users (id, username) values 
                ('user00000000000000000000000000000001', 'user1'),
                ('user00000000000000000000000000000002', 'user2');

              insert into project_members (userid, projectid) values 
                ('user00000000000000000000000000000001', 'project00000000000000000000000000001'),
                ('user00000000000000000000000000000002', 'project00000000000000000000000000001');

            EOF
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: {{.Values.image.connectionStringEnvName}}
              valueFrom:
                secretKeyRef:
                  name: {{ include "tasks-chart.fullname" . }}
                  key: PG_CONNECTION
            - name: {{ .Values.rabbitMq.hostEnvName }}
              value: "{{ .Values.rabbitMq.host }}.default.svc"
            - name: {{ .Values.rabbitMq.portEnvName }}
              value: "{{ .Values.rabbitMq.port }}"
            - name: {{ .Values.rabbitMq.usernameEnvName }}
              value: {{ .Values.rabbitMq.username }}
            - name: {{ .Values.rabbitMq.passwordEnvName }}
              value: {{ .Values.rabbitMq.password }}
          ports:
            - name: http
              containerPort: {{ .Values.image.containerPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
