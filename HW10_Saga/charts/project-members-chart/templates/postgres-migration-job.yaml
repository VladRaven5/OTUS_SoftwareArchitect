{{- if .Values.postgresql.enabled  -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: project-members-pg-migration-job
spec:
  template:
    metadata:
      name: {{ include "project-members-chart.fullname" . }}
    spec:
      restartPolicy: Never
      initContainers:
       - name: wait-pg-ready
         image: busybox:latest
         env:
          - name: POSTGRES_HOST
            value: {{ .Values.postgresql.fullnameOverride }}
         command: ['sh', '-c', 'until nslookup $POSTGRES_HOST; do echo waiting for $POSTGRES_HOST; sleep 2; done;']
      containers:
       - name: project-members-pg-migration-job
         image: postgres:latest
         env:
          - name: POSTGRES_USER
            value: {{.Values.postgresql.postgresqlUsername}}
          - name: POSTGRES_PASSWORD
            value: {{.Values.postgresql.postgresqlPassword}}
          - name: POSTGRES_DB
            value: {{.Values.postgresql.postgresqlDatabase}}
          - name: POSTGRES_HOST
            value: {{.Values.postgresql.fullnameOverride}}
          - name: POSTGRES_PORT
            value: "{{.Values.postgresql.service.port}}"
         command:
          - sh
          - "-c"
          - |
            psql "user=$POSTGRES_USER password=$POSTGRES_PASSWORD host=$POSTGRES_HOST port=$POSTGRES_PORT dbname=$POSTGRES_DB" << 'EOF'
              create database project_members;
              \c project_members;
              create table project_members (userid char(36), projectid char(36), role int, primary key (userid, projectid));
              create table projects (id char(36) primary key, title varchar(150));
              create table users (id char(36) primary key, username varchar(200));
              create table transactions(id char(36) primary key, objectid char(36), type varchar(50), data varchar, message varchar, state int, createddate timestamp);
              create table handled_requests(requestid char(36) primary key, invalidateat timestamp);
              create table outbox_messages (id serial primary key, topic varchar(30), message varchar, action varchar(30), isinprocess boolean not null default false);
            
              insert into projects (id, title) values 
                ('project00000000000000000000000000001', 'project1'),
                ('project00000000000000000000000000002', 'project2'),
                ('project00000000000000000000000000003', 'project3');

              insert into users (id, username) values 
                ('user00000000000000000000000000000001', 'user1'),
                ('user00000000000000000000000000000002', 'user2');

              insert into project_members (userid, projectid, role) values 
                ('user00000000000000000000000000000001', 'project00000000000000000000000000001', 0),
                ('user00000000000000000000000000000002', 'project00000000000000000000000000001', 1);                  
            EOF
  
  backoffLimit: 0


{{- end -}}